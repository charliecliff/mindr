//
// BuoyToggleView.m
// Generated by Core Animator version 1.3.1 on 7/23/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "BuoyToggleView.h"

@interface BuoyToggleView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation BuoyToggleView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,50,30)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 50, 30);
	__scaling__.center = CGPointMake(25.0, 15.0);
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIImageView *toggleBGOff = [UIImageView new];
	toggleBGOff.bounds = CGRectMake(0, 0, 50.0, 30.0);
	UIImage *imgToggleBGOff = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"toggleBGOff.png" ofType:nil]];
	if ( imgToggleBGOff == nil ) { NSLog(@"** Warning: Could not create image from 'toggleBGOff.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	toggleBGOff.image = imgToggleBGOff;
	toggleBGOff.contentMode = UIViewContentModeCenter;
	toggleBGOff.layer.position = CGPointMake(25.000, 15.000);
	[__scaling__ addSubview:toggleBGOff];
	viewsByName[@"toggleBGOff"] = toggleBGOff;

	UIImageView *toggleBGOn = [UIImageView new];
	toggleBGOn.bounds = CGRectMake(0, 0, 50.0, 30.0);
	UIImage *imgToggleBGOn = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"toggleBGOn.png" ofType:nil]];
	if ( imgToggleBGOn == nil ) { NSLog(@"** Warning: Could not create image from 'toggleBGOn.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	toggleBGOn.image = imgToggleBGOn;
	toggleBGOn.contentMode = UIViewContentModeCenter;
	toggleBGOn.layer.position = CGPointMake(25.000, 15.000);
	toggleBGOn.alpha = 0.00;
	[__scaling__ addSubview:toggleBGOn];
	viewsByName[@"toggleBGOn"] = toggleBGOn;

	UIImageView *toggleSwitchOff = [UIImageView new];
	toggleSwitchOff.bounds = CGRectMake(0, 0, 23.0, 25.0);
	UIImage *imgToggleSwitchOff = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"toggleSwitchOff.png" ofType:nil]];
	if ( imgToggleSwitchOff == nil ) { NSLog(@"** Warning: Could not create image from 'toggleSwitchOff.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	toggleSwitchOff.image = imgToggleSwitchOff;
	toggleSwitchOff.contentMode = UIViewContentModeCenter;
	toggleSwitchOff.layer.position = CGPointMake(15.287, 16.000);
	toggleSwitchOff.transform = CGAffineTransformMakeRotation(0.017);
	[__scaling__ addSubview:toggleSwitchOff];
	viewsByName[@"toggleSwitchOff"] = toggleSwitchOff;

	UIImageView *toggleSwitchOn = [UIImageView new];
	toggleSwitchOn.bounds = CGRectMake(0, 0, 23.0, 25.0);
	UIImage *imgToggleSwitchOn = [UIImage imageWithContentsOfFile:[bundle pathForResource:@"toggleSwitchOn.png" ofType:nil]];
	if ( imgToggleSwitchOn == nil ) { NSLog(@"** Warning: Could not create image from 'toggleSwitchOn.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	toggleSwitchOn.image = imgToggleSwitchOn;
	toggleSwitchOn.contentMode = UIViewContentModeCenter;
	toggleSwitchOn.layer.position = CGPointMake(15.505, 16.000);
	toggleSwitchOn.alpha = 0.00;
	[__scaling__ addSubview:toggleSwitchOn];
	viewsByName[@"toggleSwitchOn"] = toggleSwitchOn;

	self.viewsByName = viewsByName;
}

#pragma mark - Toggle Off

- (void)addToggleOffAnimation
{
	[self addToggleOffAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addToggleOffAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addToggleOffAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addToggleOffAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addToggleOffAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addToggleOffAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addToggleOffAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addToggleOffAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.300;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"ToggleOff"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"ToggleOff"]];
	}

	CAKeyframeAnimation *toggleSwitchOnOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleSwitchOnOpacityAnimation.duration = 0.300;
	toggleSwitchOnOpacityAnimation.values = @[@(1.000), @(0.000)];
	toggleSwitchOnOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOnOpacityAnimation.timingFunctions = @[easeInTiming];
	toggleSwitchOnOpacityAnimation.beginTime = beginTime;
	toggleSwitchOnOpacityAnimation.fillMode = fillMode;
	toggleSwitchOnOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOn"] layer] addAnimation:toggleSwitchOnOpacityAnimation forKey:@"Toggle Off_Opacity"];

	CAKeyframeAnimation *toggleSwitchOnTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toggleSwitchOnTranslationXAnimation.duration = 0.300;
	toggleSwitchOnTranslationXAnimation.values = @[@(20.000), @(0.000)];
	toggleSwitchOnTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOnTranslationXAnimation.timingFunctions = @[easeInTiming];
	toggleSwitchOnTranslationXAnimation.beginTime = beginTime;
	toggleSwitchOnTranslationXAnimation.fillMode = fillMode;
	toggleSwitchOnTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOn"] layer] addAnimation:toggleSwitchOnTranslationXAnimation forKey:@"Toggle Off_TranslationX"];

	CAKeyframeAnimation *toggleBGOnOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleBGOnOpacityAnimation.duration = 0.300;
	toggleBGOnOpacityAnimation.values = @[@(1.000), @(0.000)];
	toggleBGOnOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleBGOnOpacityAnimation.timingFunctions = @[easeInTiming];
	toggleBGOnOpacityAnimation.beginTime = beginTime;
	toggleBGOnOpacityAnimation.fillMode = fillMode;
	toggleBGOnOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleBGOn"] layer] addAnimation:toggleBGOnOpacityAnimation forKey:@"Toggle Off_Opacity"];

	CAKeyframeAnimation *toggleSwitchOffOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleSwitchOffOpacityAnimation.duration = 0.300;
	toggleSwitchOffOpacityAnimation.values = @[@(0.000), @(1.000)];
	toggleSwitchOffOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOffOpacityAnimation.timingFunctions = @[linearTiming];
	toggleSwitchOffOpacityAnimation.beginTime = beginTime;
	toggleSwitchOffOpacityAnimation.fillMode = fillMode;
	toggleSwitchOffOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOff"] layer] addAnimation:toggleSwitchOffOpacityAnimation forKey:@"Toggle Off_Opacity"];

	CAKeyframeAnimation *toggleSwitchOffTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toggleSwitchOffTranslationXAnimation.duration = 0.300;
	toggleSwitchOffTranslationXAnimation.values = @[@(20.000), @(0.000)];
	toggleSwitchOffTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOffTranslationXAnimation.timingFunctions = @[easeInTiming];
	toggleSwitchOffTranslationXAnimation.beginTime = beginTime;
	toggleSwitchOffTranslationXAnimation.fillMode = fillMode;
	toggleSwitchOffTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOff"] layer] addAnimation:toggleSwitchOffTranslationXAnimation forKey:@"Toggle Off_TranslationX"];
}

- (void)removeToggleOffAnimation
{
	[self.layer removeAnimationForKey:@"ToggleOff"];
	[[self.viewsByName[@"toggleSwitchOn"] layer] removeAnimationForKey:@"Toggle Off_Opacity"];
	[[self.viewsByName[@"toggleSwitchOn"] layer] removeAnimationForKey:@"Toggle Off_TranslationX"];
	[[self.viewsByName[@"toggleBGOn"] layer] removeAnimationForKey:@"Toggle Off_Opacity"];
	[[self.viewsByName[@"toggleSwitchOff"] layer] removeAnimationForKey:@"Toggle Off_Opacity"];
	[[self.viewsByName[@"toggleSwitchOff"] layer] removeAnimationForKey:@"Toggle Off_TranslationX"];
}

#pragma mark - Toggle On

- (void)addToggleOnAnimation
{
	[self addToggleOnAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addToggleOnAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addToggleOnAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addToggleOnAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addToggleOnAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addToggleOnAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addToggleOnAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addToggleOnAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
	CAMediaTimingFunction *easeOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 0.300;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"ToggleOn"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"ToggleOn"]];
	}

	CAKeyframeAnimation *toggleSwitchOnOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleSwitchOnOpacityAnimation.duration = 0.300;
	toggleSwitchOnOpacityAnimation.values = @[@(0.000), @(1.000)];
	toggleSwitchOnOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOnOpacityAnimation.timingFunctions = @[easeOutTiming];
	toggleSwitchOnOpacityAnimation.beginTime = beginTime;
	toggleSwitchOnOpacityAnimation.fillMode = fillMode;
	toggleSwitchOnOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOn"] layer] addAnimation:toggleSwitchOnOpacityAnimation forKey:@"Toggle On_Opacity"];

	CAKeyframeAnimation *toggleSwitchOnTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toggleSwitchOnTranslationXAnimation.duration = 0.300;
	toggleSwitchOnTranslationXAnimation.values = @[@(0.000), @(20.000)];
	toggleSwitchOnTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOnTranslationXAnimation.timingFunctions = @[easeOutTiming];
	toggleSwitchOnTranslationXAnimation.beginTime = beginTime;
	toggleSwitchOnTranslationXAnimation.fillMode = fillMode;
	toggleSwitchOnTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOn"] layer] addAnimation:toggleSwitchOnTranslationXAnimation forKey:@"Toggle On_TranslationX"];

	CAKeyframeAnimation *toggleBGOnOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleBGOnOpacityAnimation.duration = 0.300;
	toggleBGOnOpacityAnimation.values = @[@(0.000), @(1.000)];
	toggleBGOnOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleBGOnOpacityAnimation.timingFunctions = @[easeOutTiming];
	toggleBGOnOpacityAnimation.beginTime = beginTime;
	toggleBGOnOpacityAnimation.fillMode = fillMode;
	toggleBGOnOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleBGOn"] layer] addAnimation:toggleBGOnOpacityAnimation forKey:@"Toggle On_Opacity"];

	CAKeyframeAnimation *toggleSwitchOffOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	toggleSwitchOffOpacityAnimation.duration = 0.300;
	toggleSwitchOffOpacityAnimation.values = @[@(1.000), @(0.000)];
	toggleSwitchOffOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOffOpacityAnimation.timingFunctions = @[linearTiming];
	toggleSwitchOffOpacityAnimation.beginTime = beginTime;
	toggleSwitchOffOpacityAnimation.fillMode = fillMode;
	toggleSwitchOffOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOff"] layer] addAnimation:toggleSwitchOffOpacityAnimation forKey:@"Toggle On_Opacity"];

	CAKeyframeAnimation *toggleSwitchOffTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
	toggleSwitchOffTranslationXAnimation.duration = 0.300;
	toggleSwitchOffTranslationXAnimation.values = @[@(0.000), @(20.000)];
	toggleSwitchOffTranslationXAnimation.keyTimes = @[@(0.000), @(1.000)];
	toggleSwitchOffTranslationXAnimation.timingFunctions = @[easeOutTiming];
	toggleSwitchOffTranslationXAnimation.beginTime = beginTime;
	toggleSwitchOffTranslationXAnimation.fillMode = fillMode;
	toggleSwitchOffTranslationXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"toggleSwitchOff"] layer] addAnimation:toggleSwitchOffTranslationXAnimation forKey:@"Toggle On_TranslationX"];
}

- (void)removeToggleOnAnimation
{
	[self.layer removeAnimationForKey:@"ToggleOn"];
	[[self.viewsByName[@"toggleSwitchOn"] layer] removeAnimationForKey:@"Toggle On_Opacity"];
	[[self.viewsByName[@"toggleSwitchOn"] layer] removeAnimationForKey:@"Toggle On_TranslationX"];
	[[self.viewsByName[@"toggleBGOn"] layer] removeAnimationForKey:@"Toggle On_Opacity"];
	[[self.viewsByName[@"toggleSwitchOff"] layer] removeAnimationForKey:@"Toggle On_Opacity"];
	[[self.viewsByName[@"toggleSwitchOff"] layer] removeAnimationForKey:@"Toggle On_TranslationX"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"ToggleOff"];
	[self.layer removeAnimationForKey:@"ToggleOn"];
}

@end